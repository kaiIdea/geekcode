亨元模式
所谓“享元”，顾名思义就是被共享的单元。享元模式的意图是复用对象，节省内存，前提是享元对象是不可变对象。

虽然对象池、连接池、线程池、享元模式都是为了复用，
但是，如果我们再细致地抠一抠“复用”这个字眼的话，对象池、连接池、线程池等池化技术中的“复用”和享元模式中的“复用”实际上是不同的概念。
池化技术中的“复用”可以理解为“重复使用”，主要目的是节省时间（比如从数据库池中取一个连接，不需要重新创建）。
在任意时刻，每一个对象、连接、线程，并不会被多处使用，而是被一个使用者独占，当使用完成之后，放回到池中，再由其他使用者重复利用。
享元模式中的“复用”可以理解为“共享使用”，在整个生命周期中，都是被所有使用者共享的，主要目的是节省空间。


应用单例模式是为了保证对象全局唯一。应用享元模式是为了实现对象复用，节省内存。缓存是为了提高访问效率，而非复用。
池化技术中的“复用”理解为“重复使用”，主要是为了节省时间。




在Integer String对象中的使用。

Integer对象
自动装箱时，Integer i = 56  等同于 Integer i = Integer.valueof(56); 解释下等号左右两边的语义。
           左边创建了一个变量i,右边创建了一个Integer类型的对象，对象赋值为56，创建成功后返回该对象内存地址，将内存地址指向变量i,i存储的是对象地址。
自动拆箱时，int j = i  等同于 int j = i.intValue();

testCode:
        Integer i1 = 56;
        Integer i2 = 56;
        Integer i3 = 129;
        Integer i4 = 129;

        System.out.println(i1==i2); [-128,127]区间。获取的亨元共享对象,也就是说获取的是同一个对象内存地址
        System.out.println(i3==i4); 不共享对象/不同对象，对比内存地址，当然为false


testResult:
        true
        false


String中的应用

testCode:
        String str1 = "what";
        String str2 = "what";
        String str3 = new String("what");
        System.out.println(str1 == str2);
        System.out.println(str1 == str3);


testResult:
        true
        false

        ps：String 类利用享元模式来复用相同的字符串常量（也就是代码中的“小争哥”）。JVM 会专门开辟一块存储区来存储字符串常量，
        不过，String 类的享元模式的设计，跟 Integer 类稍微有些不同。Integer 类中要共享的对象，是在类加载的时候，就集中一次性创建好的。
        但是，对于字符串来说，我们没法事先知道要共享哪些字符串常量，所以没办法事先创建好，只能在某个字符串常量第一次被用到的时候，存储到常量池中，
        当之后再用到的时候，直接引用常量池中已经存在的即可，就不需要再重新创建了。













































